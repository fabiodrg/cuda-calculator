// Generated by CoffeeScript 1.12.7
(function() {
  var ceil, cudaRuntimeUsedSharedMemory, floor, mainConfig;

  mainConfig = {
    '2.0': {
      version: '2.0',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 48,
      threadsPerMultiprocessor: 1536,
      threadBlocksPerMultiprocessor: 8,
      sharedMemoryPerMultiprocessor: 49152,
      registerFileSize: 32768,
      registerAllocationUnitSize: 64,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 63,
      maxRegistersPerBlock: 32768,
      sharedMemoryAllocationUnitSize: 128,
      warpAllocationGranularity: 2,
      maxThreadBlockSize: 1024
    },
    '2.1': {
      version: '2.1',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 48,
      threadsPerMultiprocessor: 1536,
      threadBlocksPerMultiprocessor: 8,
      sharedMemoryPerMultiprocessor: 49152,
      registerFileSize: 32768,
      registerAllocationUnitSize: 64,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 63,
      maxRegistersPerBlock: 32768,
      sharedMemoryAllocationUnitSize: 128,
      warpAllocationGranularity: 2,
      maxThreadBlockSize: 1024
    },
    '3.0': {
      version: '3.0',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 16,
      sharedMemoryPerMultiprocessor: 49152,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 63,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '3.2': {
      version: '3.2',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 16,
      sharedMemoryPerMultiprocessor: 49152,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '3.5': {
      version: '3.5',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 16,
      sharedMemoryPerMultiprocessor: 49152,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '3.7': {
      version: '3.7',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 16,
      sharedMemoryPerMultiprocessor: 114688,
      registerFileSize: 131072,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '5.0': {
      version: '5.0',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 65536,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '5.2': {
      version: '5.2',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 98304,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 32768,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '5.3': {
      version: '5.3',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 65536,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 32768,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '6.0': {
      version: '6.0',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 65536,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 2,
      maxThreadBlockSize: 1024
    },
    '6.1': {
      version: '6.1',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 98304,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '6.2': {
      version: '6.2',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 65536,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '7.0': {
      version: '7.0',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 98304,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '7.5': {
      version: '7.5',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 32,
      threadsPerMultiprocessor: 1024,
      threadBlocksPerMultiprocessor: 16,
      sharedMemoryPerMultiprocessor: 65536,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 256,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '8.0': {
      version: '8.0',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 64,
      threadsPerMultiprocessor: 2048,
      threadBlocksPerMultiprocessor: 32,
      sharedMemoryPerMultiprocessor: 167936,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 128,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    },
    '8.6': {
      version: '8.6',
      threadsPerWarp: 32,
      warpsPerMultiprocessor: 48,
      threadsPerMultiprocessor: 1536,
      threadBlocksPerMultiprocessor: 16,
      sharedMemoryPerMultiprocessor: 102400,
      registerFileSize: 65536,
      registerAllocationUnitSize: 256,
      allocationGranularity: 'warp',
      maxRegistersPerThread: 255,
      maxRegistersPerBlock: 65536,
      sharedMemoryAllocationUnitSize: 128,
      warpAllocationGranularity: 4,
      maxThreadBlockSize: 1024
    }
  };

  cudaRuntimeUsedSharedMemory = {
    '11.0': 1024,
    '11.1': 1024
  };

  ceil = function(a, b) {
    return Math.ceil(a / b) * b;
  };

  floor = function(a, b) {
    return Math.floor(a / b) * b;
  };

  window.calculateOccupancy = function(input) {
    var activeThreadBlocksPerMultiprocessor, activeThreadsPerMultiprocessor, activeWarpsPerMultiprocessor, blockRegisters, blockSharedMemory, blockWarps, config, cudaRuntimeSharedMemory, occupancyOfMultiprocessor, output, registersPerWarp, threadBlocksPerMultiprocessorLimitedByRegistersPerMultiprocessor, threadBlocksPerMultiprocessorLimitedBySharedMemoryPerMultiprocessor, threadBlocksPerMultiprocessorLimitedByWarpsOrBlocksPerMultiprocessor, warpsPerMultiprocessorLimitedByRegisters;
    config = mainConfig[input.version];
    blockWarps = function() {
      return Math.ceil(input.threadsPerBlock / config.threadsPerWarp);
    };
    registersPerWarp = function() {
      return ceil(input.registersPerThread * config.threadsPerWarp, config.registerAllocationUnitSize);
    };
    blockRegisters = function() {
      return registersPerWarp() * blockWarps();
    };
    warpsPerMultiprocessorLimitedByRegisters = function() {
      return floor(config.maxRegistersPerBlock / registersPerWarp(), config.warpAllocationGranularity);
    };
    cudaRuntimeSharedMemory = function() {
      if (Number.parseFloat(input.version) >= 8) {
        return cudaRuntimeUsedSharedMemory[input.cudaVersion];
      } else {
        return 0;
      }
    };
    blockSharedMemory = function() {
      return ceil(Number.parseInt(input.sharedMemoryPerBlock) + cudaRuntimeSharedMemory(), config.sharedMemoryAllocationUnitSize);
    };
    threadBlocksPerMultiprocessorLimitedByWarpsOrBlocksPerMultiprocessor = function() {
      return Math.min(config.threadBlocksPerMultiprocessor, Math.floor(config.warpsPerMultiprocessor / blockWarps()));
    };
    threadBlocksPerMultiprocessorLimitedByRegistersPerMultiprocessor = function() {
      if (input.registersPerThread > config.maxRegistersPerThread) {
        return 0;
      } else if (input.registersPerThread > 0) {
        return Math.floor(warpsPerMultiprocessorLimitedByRegisters() / blockWarps()) * Math.floor(config.registerFileSize / config.maxRegistersPerBlock);
      } else {
        return config.threadBlocksPerMultiprocessor;
      }
    };
    threadBlocksPerMultiprocessorLimitedBySharedMemoryPerMultiprocessor = function() {
      if (input.sharedMemoryPerBlock > 0) {
        return Math.floor(config.sharedMemoryPerMultiprocessor / blockSharedMemory());
      } else {
        return config.threadBlocksPerMultiprocessor;
      }
    };
    activeThreadsPerMultiprocessor = function() {
      return input.threadsPerBlock * activeThreadBlocksPerMultiprocessor();
    };
    activeWarpsPerMultiprocessor = function() {
      return activeThreadBlocksPerMultiprocessor() * blockWarps();
    };
    activeThreadBlocksPerMultiprocessor = function() {
      return Math.min(threadBlocksPerMultiprocessorLimitedByWarpsOrBlocksPerMultiprocessor(), threadBlocksPerMultiprocessorLimitedByRegistersPerMultiprocessor(), threadBlocksPerMultiprocessorLimitedBySharedMemoryPerMultiprocessor());
    };
    occupancyOfMultiprocessor = function() {
      return activeWarpsPerMultiprocessor() / config.warpsPerMultiprocessor;
    };
    output = {
      activeThreadsPerMultiprocessor: activeThreadsPerMultiprocessor(),
      activeWarpsPerMultiprocessor: activeWarpsPerMultiprocessor(),
      activeThreadBlocksPerMultiprocessor: activeThreadBlocksPerMultiprocessor(),
      occupancyOfMultiprocessor: occupancyOfMultiprocessor(),
      blockWarps: blockWarps(),
      blockSharedMemory: blockSharedMemory(),
      blockRegisters: blockRegisters(),
      threadBlocksPerMultiprocessorLimitedByWarpsOrBlocksPerMultiprocessor: threadBlocksPerMultiprocessorLimitedByWarpsOrBlocksPerMultiprocessor(),
      threadBlocksPerMultiprocessorLimitedByRegistersPerMultiprocessor: threadBlocksPerMultiprocessorLimitedByRegistersPerMultiprocessor(),
      threadBlocksPerMultiprocessorLimitedBySharedMemoryPerMultiprocessor: threadBlocksPerMultiprocessorLimitedBySharedMemoryPerMultiprocessor()
    };
    return Object.assign(output, config);
  };

  window.computeGraphsValues = function(input) {
    var config, graphWarpOccupancyOfRegistersPerThread, graphWarpOccupancyOfSharedMemoryPerBlock, graphWarpOccupancyOfThreadsPerBlock;
    config = mainConfig[input.version];
    graphWarpOccupancyOfThreadsPerBlock = function() {
      var current, i, inp, r, ref, threadsPerBlock;
      current = {
        key: input.threadsPerBlock,
        value: window.calculateOccupancy(input).activeWarpsPerMultiprocessor
      };
      inp = Object.assign({}, input);
      r = [];
      for (threadsPerBlock = i = 32, ref = config.maxThreadBlockSize; i <= ref; threadsPerBlock = i += 32) {
        inp.threadsPerBlock = threadsPerBlock;
        r.push({
          key: threadsPerBlock,
          value: window.calculateOccupancy(inp).activeWarpsPerMultiprocessor
        });
      }
      return {
        xLabel: "Threads per block",
        data: r,
        current: current
      };
    };
    graphWarpOccupancyOfRegistersPerThread = function() {
      var current, i, inp, r, ref, registersPerThread;
      current = {
        key: input.registersPerThread,
        value: window.calculateOccupancy(input).activeWarpsPerMultiprocessor
      };
      inp = Object.assign({}, input);
      r = [];
      for (registersPerThread = i = 0, ref = config.maxRegistersPerThread; 0 <= ref ? i <= ref : i >= ref; registersPerThread = 0 <= ref ? ++i : --i) {
        inp.registersPerThread = registersPerThread;
        r.push({
          key: registersPerThread,
          value: window.calculateOccupancy(inp).activeWarpsPerMultiprocessor
        });
      }
      return {
        xLabel: "Registers per thread",
        data: r,
        current: current
      };
    };
    graphWarpOccupancyOfSharedMemoryPerBlock = function() {
      var current, i, inp, r, ref, sharedMemoryPerBlock;
      current = {
        key: input.sharedMemoryPerBlock,
        value: window.calculateOccupancy(input).activeWarpsPerMultiprocessor
      };
      inp = Object.assign({}, input);
      r = [];
      for (sharedMemoryPerBlock = i = 0, ref = config.sharedMemoryPerMultiprocessor; i <= ref; sharedMemoryPerBlock = i += 512) {
        inp.sharedMemoryPerBlock = sharedMemoryPerBlock;
        r.push({
          key: sharedMemoryPerBlock,
          value: window.calculateOccupancy(inp).activeWarpsPerMultiprocessor
        });
      }
      return {
        xLabel: "Shared memory per block",
        data: r,
        current: current
      };
    };
    return {
      graphWarpOccupancyOfThreadsPerBlock: graphWarpOccupancyOfThreadsPerBlock(),
      graphWarpOccupancyOfRegistersPerThread: graphWarpOccupancyOfRegistersPerThread(),
      graphWarpOccupancyOfSharedMemoryPerBlock: graphWarpOccupancyOfSharedMemoryPerBlock()
    };
  };

}).call(this);
